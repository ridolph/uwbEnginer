---- _ancArray Matches (119 in 2 files) ----
RTLSClient.cpp (network):    //memset(&_ancArray, 0, MAX_NUM_ANCS*sizeof(anc_struct_t));
RTLSClient.cpp (network):			if(_ancArray[aid].tagId.contains(tid) == false)
RTLSClient.cpp (network):				_ancArray[aid].tagId.append(tid);
RTLSClient.cpp (network):				_ancArray[aid].tagSum++;
RTLSClient.cpp (network):			printf("_ancArray[0] = %d\n", _ancArray[0].tagSum);
RTLSClient.cpp (network):			printf("_ancArray[1] = %d\n", _ancArray[1].tagSum);
RTLSClient.cpp (network):                    QString s =  nowstr + QString("AP:%1:%2:%3:%4\n").arg(j).arg(_ancArray[j].x).arg(_ancArray[j].y).arg(_ancArray[j].z);
RTLSClient.cpp (network):    //qDebug() << "a and t " << aid << tid << "correction = " << (_ancArray[aid].tagRangeCorection[tid] * 0.01);
RTLSClient.cpp (network):                    _ancArray[i].x = estCoord.at(i,0);
RTLSClient.cpp (network):                    _ancArray[i].y = estCoord.at(i,1);
RTLSClient.cpp (network):                    emit anchPos(i, _ancArray[i].x, _ancArray[i].y, _ancArray[i].z, false, true); // Update table entry
RTLSClient.cpp (network):    range_corrected = (0 == range)?0:(range + (_ancArray[aid].tagRangeCorection[tid] * 10)); //range correction is in cm (range is in mm)
RTLSClient.cpp (network):    int range_corrected = range + (_ancArray[aid].tagRangeCorection[tid] * 10); //range correction is in cm (range is in mm)
RTLSClient.cpp (network):    //qDebug() << "a and t " << aid << tid << "correction = " << (_ancArray[aid].tagRangeCorection[tid] * 0.01);
RTLSClient.cpp (network):            report->x = _ancArray[keep0id].x;
RTLSClient.cpp (network):            report->y = _ancArray[keep0id].y;
RTLSClient.cpp (network):            report->z = _ancArray[keep0id].z;
RTLSClient.cpp (network):                CtrPoints[i*3] = _ancArray[baseid[i-1]].x;
RTLSClient.cpp (network):                CtrPoints[i*3+1] = _ancArray[baseid[i-1]].y;
RTLSClient.cpp (network):                CtrPoints[i*3+2] = _ancArray[baseid[i-1]].z;
RTLSClient.cpp (network):                CtrPoints[i*3] = _ancArray[baseid[i+1]].x;
RTLSClient.cpp (network):                CtrPoints[i*3+1] = _ancArray[baseid[i+1]].y;
RTLSClient.cpp (network):                CtrPoints[i*3+2] = _ancArray[baseid[i+1]].z;
RTLSClient.cpp (network):            CtrPoints[i*3] = _ancArray[baseid[i]].x;
RTLSClient.cpp (network):            CtrPoints[i*3+1] = _ancArray[baseid[i]].y;
RTLSClient.cpp (network):            CtrPoints[i*3+2] = _ancArray[baseid[i]].z;
RTLSClient.cpp (network):        //printf("keep0id = %d,%0.2f\n",keep0id,_ancArray[keep0id].x);
RTLSClient.cpp (network):        report->x = _ancArray[keep0id].x;
RTLSClient.cpp (network):        report->y = _ancArray[keep0id].y;
RTLSClient.cpp (network):        report->z = _ancArray[keep0id].z;
RTLSClient.cpp (network):    double dstAB = sqrt(pow(_ancArray[baseid0].x - _ancArray[baseid1].x, 2) + pow(_ancArray[baseid0].y - _ancArray[baseid1].y, 2));
RTLSClient.cpp (network):    anc[0] = _ancArray[baseid0].x;
RTLSClient.cpp (network):    anc[1] = _ancArray[baseid0].y;
RTLSClient.cpp (network):    anc[2] = _ancArray[baseid1].x;
RTLSClient.cpp (network):    anc[3] = _ancArray[baseid1].y;
RTLSClient.cpp (network):    report->z = _ancArray[baseid0].z;
RTLSClient.cpp (network):    anchorArray[0].x = _ancArray[0].x;
RTLSClient.cpp (network):    anchorArray[0].y = _ancArray[0].y;
RTLSClient.cpp (network):    anchorArray[0].z = _ancArray[0].z;
RTLSClient.cpp (network):    anchorArray[1].x = _ancArray[1].x;
RTLSClient.cpp (network):    anchorArray[1].y = _ancArray[1].y;
RTLSClient.cpp (network):    anchorArray[1].z = _ancArray[1].z;
RTLSClient.cpp (network):    anchorArray[2].x = _ancArray[2].x;
RTLSClient.cpp (network):    anchorArray[2].y = _ancArray[2].y;
RTLSClient.cpp (network):    anchorArray[2].z = _ancArray[2].z;
RTLSClient.cpp (network):    anchorArray[3].x = _ancArray[3].x;
RTLSClient.cpp (network):    anchorArray[3].y = _ancArray[3].y;
RTLSClient.cpp (network):    anchorArray[3].z = _ancArray[3].z;
RTLSClient.cpp (network):        if(_ancArray[i].id == 0xff)
RTLSClient.cpp (network):            _ancArray[i].id = i;
RTLSClient.cpp (network):            emit anchPos(i, _ancArray[i].x, _ancArray[i].y, _ancArray[i].z, false, false);
RTLSClient.cpp (network):        _ancArray[i].id = 0xff;
RTLSClient.cpp (network):        _ancArray[i].label = "";
RTLSClient.cpp (network):        _ancArray[i].x = x[i];  //default x
RTLSClient.cpp (network):        _ancArray[i].y = y[i];  //default y
RTLSClient.cpp (network):        _ancArray[i].z = 3.00;  //default z
RTLSClient.cpp (network):            _ancArray[i].tagRangeCorection[j] =  0;
RTLSClient.cpp (network):                        _ancArray[id].id = id & 0xf;
RTLSClient.cpp (network):                        _ancArray[id].label = (e.attribute( "label", "" ));
RTLSClient.cpp (network):                        _ancArray[id].x = (e.attribute("x", "0.0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].y = (e.attribute("y", "0.0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].z = (e.attribute("z", "0.0")).toDouble(&ok);
RTLSClient.cpp (network):						_ancArray[id].group = (e.attribute("Group", "")).toInt(&ok);
RTLSClient.cpp (network):						printf("_ancArray[%d].group = %d\n", id,_ancArray[id].group);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[0] = (e.attribute("t0", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[1] = (e.attribute("t1", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[2] = (e.attribute("t2", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[3] = (e.attribute("t3", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[4] = (e.attribute("t4", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[5] = (e.attribute("t5", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[6] = (e.attribute("t6", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].tagRangeCorection[7] = (e.attribute("t7", "0")).toDouble(&ok);
RTLSClient.cpp (network):                        _ancArray[id].show = (e.attribute("show","0")).toInt();
RTLSClient.cpp (network):                        if(true == _ancArray[id].show)
RTLSClient.cpp (network):                       emit anchPos(id, _ancArray[id].x, _ancArray[id].y, _ancArray[id].z, _ancArray[id].show, false);
RTLSClient.cpp (network):					   //emit anchInfo(_ancArray[id].id, _ancArray[id].group, _ancArray[id].x, _ancArray[id].y, _ancArray[id].z);
RTLSClient.cpp (network):        config.appendChild( AnchorToNode(doc, &_ancArray[i]) );
RTLSClient.cpp (network):        _ancArray[id].x = value;
RTLSClient.cpp (network):        _ancArray[id].y = value;
RTLSClient.cpp (network):        _ancArray[id].z = value;
RTLSClient.cpp (network):        QString s =  nowstr + QString("AP:%1:%2:%3:%4\n").arg(id).arg(_ancArray[id].x).arg(_ancArray[id].y).arg(_ancArray[id].z);
RTLSClient.cpp (network):    _ancArray[aid].tagRangeCorection[tid] = value;
RTLSClient.cpp (network):    if(_ancArray[id].show == show)
RTLSClient.cpp (network):    _ancArray[id].show = show;
RTLSClient.cpp (network):    return &_ancArray[anchID].tagRangeCorection[0];
RTLSClient.cpp (network):            if(true == _ancArray[i].show)
RTLSClient.cpp (network):                if(true == _ancArray[i].show)
RTLSClient.cpp (network):                   int range_corrected = range + (_ancArray[i].tagRangeCorection[idx] * 10); //range correction is in cm (range is in mm)
RTLSClient.cpp (network):                   emit tagRange(rp.id, _ancArray[i].id, (range_corrected * 0.001)); //convert to meters
RTLSClient.cpp (network):    //int range_corrected = range + (_ancArray[aid].tagRangeCorection[tid] * 10); //range correction is in cm (range is in mm)
RTLSClient.cpp (network):		ancTemp.tagSum = _ancArray[aid].tagSum;
RTLSClient.cpp (network):		_tcpClient->sendAncStatus(aid,1,_ancArray[aid].tagSum);
RTLSClient.cpp (network):		if(_ancArray[i].workState == 1)
RTLSClient.cpp (network):			_tcpClient->sendAncStatus(_ancArray[i].id,_ancArray[i].workState,_ancArray[i].tagSum);
RTLSClient.cpp (network):			_tcpClient->sendAncStatus(aid, 0 ,_ancArray[aid].tagSum);
RTLSClient.h (network):    anc_struct_t _ancArray[MAX_NUM_ANCS];
